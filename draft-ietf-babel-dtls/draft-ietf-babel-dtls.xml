<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6066 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">
<!ENTITY RFC6347 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!ENTITY RFC7250 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7250.xml">
<!ENTITY RFC7525 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7525.xml">
<!ENTITY RFC7918 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7918.xml">
<!ENTITY RFC7924 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7924.xml">
<!ENTITY RFC8094 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8094.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="no" ?>
<rfc category="std"
    updates="6126bis"
    obsoletes=""
    docName="draft-ietf-babel-dtls-01"
    ipr="trust200902">
<front>
<title abbrev="Babel over DTLS">Babel Routing Protocol over Datagram
Transport Layer Security</title>
<author fullname="Antonin Decimo" initials="A." surname="Decimo">
<organization>IRIF, University of Paris-Diderot</organization>
<address>
<postal>
<street></street>
<city>Paris</city>
<region></region>
<code></code>
<country>France</country>
</postal>
<email>antonin.decimo@gmail.com</email>
</address>
</author>

<author fullname='David Schinazi' surname='Schinazi' initials='D.'>
<organization>Apple Inc.</organization>
<address>
<postal>
<street>One Apple Park Way</street>
<city>Cupertino</city>
<region>California</region>
<code>95014</code>
<country>USA</country>
</postal>
<email>dschinazi@apple.com</email>
</address>
</author>

<author fullname="Juliusz Chroboczek" initials="J." surname="Chroboczek">
<organization>IRIF, University of Paris-Diderot</organization>
<address>
<postal>
<street>Case 7014</street>
<city>75205 Paris Cedex 13</city>
<region></region>
<code></code>
<country>France</country>
</postal>
<email>jch@irif.fr</email>
</address>
</author>

<date year="2018" />

<abstract>
<t>The Babel Routing Protocol does not contain any means to authenticate
neighbours or protect messages sent between them.  This documents describes
a mechanism to ensure these properties, using Datagram Transport Layer
Security (DTLS). This document updates RFC 6126bis.</t>
</abstract>

</front>

<middle>

<section title="Introduction">

<t>The Babel Routing Protocol <xref target="RFC6126bis"/> does not contain
any means to authenticate neighbours or protect messages sent between them.
Because of this, an attacker is able to send maliciously crafted Babel
messages which could lead a network to route traffic to an attacker or
to an under-resourced target causing denial of service.
This documents describes a mechanism to prevent such attacks, using
Datagram Transport Layer Security (DTLS) <xref target="RFC6347"/>.</t>

<section title="Specification of Requirements">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
when, they appear in all capitals, as shown here.</t>

</section>


<section title="Applicability">

<t>The current two main mechanisms for securing Babel are Babel over DTLS
(as described in this document) and Babel Cryptographic Authentification
<xref target="BabelHMAC"/>.  The latter has the advantages of being simpler
and not requiring a dependency on DTLS.  When both security mechanisms are
applicable to a given deployment, it is RECOMMENDED to use Babel Cryptographic
Authentification.  Both mechanisms ensure integrity of messages and prevent
message replay.</t>

<t>However, the following features are not provided by Babel Cryptographic
Authentification, therefore Babel over DTLS is applicable in cases where
those features are needed:
<list style="symbols">
<t>Asymmetric keys.  DTLS allows authentication via asymetric keys, which
allows a finer granularity of trust per-peer, and allows for revocation.</t>
<t>Confidentiality of data.  DTLS encrypts payloads, preventing an on-link
attacker from observing the routing table.</t>
</list></t>

</section>

</section>

<section title="Operation of the Protocol">

<t>Babel over DTLS requires changes to how Babel is operated, for two
reasons. Firstly, because DTLS introduces the concepts of client and server,
while Babel is a peer-to-peer protocol. Secondly, DTLS can only protect
unicast, while Babel TLVs can be sent over both unicast and multicast.</t>

<section title="DTLS Connection Initiation">

<t>All Babel over DTLS nodes MUST act as DTLS servers on the "babel-dtls" port
(UDP port TBD), and listen for multicast traffic on the unencrypted "babel"
port (UDP port 6696).  When a Babel node discovers a new neighbor (generally by
receiving an unencrypted multicast Babel packet), it compares the neighbour's
IPv6 link-local address with its own, using network byte ordering.  If a node's
address is lower than the recently discovered neighbor's address, it acts
as a client and connects to the neighbor.  In other words, the node with
the lowest address is the DTLS client for this pairwise relationship.
As an example, fe80::1:2 is considered lower than fe80::2:1.  The node acting
as DTLS client initiates its DTLS connection from an ephemeral UDP port.
Nodes SHOULD ensure that new client DTLS connections use different ephemeral
ports from recently used connections to allow servers to differentiate between
the new and old DTLS connections.   When a node receives a new DTLS connection,
it MUST verify the source IP address, and reject the connection if the address
is not an IPv6 link-local address.</t>

</section>

<section title="Protocol Encoding">

<t>Babel over DTLS sends all unicast Babel packets encrypted by DTLS.  The
entire Babel packet, from the Magic byte at the start of the Babel header
to the last byte of the Babel packet footer, is sent protected by DTLS.</t>

</section>

<section title="Transmission">

<t>When sending packets, Babel over DTLS nodes MUST NOT send any TLVs over
the unprotected "babel" port, with the exception of Hello TLVs without the
Unicast flag set.  Babel over DTLS nodes MUST NOT send any unprotected unicast
packet.  Nodes MUST periodically send unprotected multicast Hellos to ensure
discovery of new neighbours.  In order to maintain bidirectional reachability,
nodes can either rely on unprotected multicast Hellos, or also send protected
unicast Hellos.  In contrast with an unprotected implementation of Babel,
Babel over DTLS nodes will replace any TLV sent over multicast with a separate
TLV sent over unicast for each neighbour.</t>

</section>

<section title="Reception">

<t>Babel over DTLS nodes can receive Babel packets either protected over a
DTLS connection, or unprotected directly over the "babel" port.  To ensure the
security properties of this mechanism, unprotected packets are treated
differently.  Nodes MUST silently ignore any unprotected packet sent over
unicast.  When parsing an unprotected packet, a node MUST silently
ignore all TLVs that are not of type Hello.  Nodes MUST also silently ignore
any unprotected Hello with the Unicast flag set.  Note that receiving an
unprotected packet can still be used to discover new neighbors, even when
all TLVs in that packet are silently ignored.</t>

</section>

<section title="Neighbour table entry">

<t>It is RECOMMENDED for nodes to associate the state of their DTLS connection
with their neighbour table.  When a neighbour entry is flushed from the
neighbour table (Appendix A of <xref target="RFC6126bis"/>), its associated
DTLS state SHOULD be discarded.  The node MAY send a DTLS close_notify alert to
the neighbour.</t>

</section>

</section>

<section title="Interface Maximum Transmission Unit Issues">

<t>Compared to unprotected Babel, DTLS adds header, authentication tag and
possibly block-size padding overhead to every packet.  This reduces the size of
the Babel payload that can be carried.  Nodes SHOULD compute the overhead of
DTLS depending on the ciphers in use, and SHOULD NOT send Babel packets larger
than the interface maximum transmission unit (MTU) minus the overhead of lower
layers (IP, UDP and DTLS).  This helps reduce the likelihood of lower-layer
fragmentation which would negatively impact performance and reliability.
Nodes MUST NOT send Babel packets larger than the attached interface's MTU
adjusted for known lower-layer headers (at least UDP and IP) or 512 octets,
whichever is larger, but not exceeding 2^16 - 1 adjusted for lower-layer
headers.  Every Babel speaker MUST be able to receive packets that are as
large as any attached interface's MTU adjusted for UDP and IP headers or
512 octets, whichever is larger.  Note that this requirement on reception
does not take into account the overhead of DTLS because the peer may not have
the ability to compute the overhead of DTLS and the packet may be fragmented
by lower layers.  Babel packets MUST NOT be sent in IPv6 Jumbograms.</t>

</section>

<section title="IANA Considerations">

<t>If this document is approved, IANA is requested to register a UDP port
number, called "babel-dtls", for use by Babel over DTLS.</t>

</section>

<section title="Security Considerations">

<t>The interaction between two Babel peers requires Datagram Transport
Layer Security (DTLS) with a cipher suite offering confidentiality
protection.  The guidance given in <xref target="RFC7525"/> MUST be
followed to avoid attacks on DTLS.  The DTLS client SHOULD use the TLS
Certificate Status Request extension (Section 8 of <xref
target="RFC6066"/>).</t>

<t>A malicious client might attempt to perform a high number of DTLS
handshakes with a server.  As the clients are not uniquely identified
by the protocol and can be obfuscated with IPv4 address sharing and
with IPv6 temporary addresses, a server needs to mitigate the impact
of such an attack.  Such mitigation might involve rate limiting
handshakes from a given subnet or more advanced denial of service avoidance
techniques beyond the scope of this document.</t>

</section>

</middle>

<back>

<references title="Normative References">

&RFC2119;
&RFC6347;
&RFC8174;

<reference anchor="RFC6126bis"><front>
<title>The Babel Routing Protocol</title>
<author fullname="Juliusz Chroboczek" initials="J." surname="Chroboczek"/>
<author fullname="David Schinazi" initials="D." surname="Schinazi"/>
<date month="May" year="2018"/></front>
<seriesInfo name="Internet Draft" value="draft-ietf-babel-rfc6126bis-05"/>
</reference>

</references>

<references title="Informative References">

&RFC7250;
&RFC7918;
&RFC7924;
&RFC6066;
&RFC7525;
&RFC8094;

<reference anchor="BabelHMAC"><front>
<title>Babel Cryptographic Authentification</title>
<author fullname="Clara Do" initials="C." surname="Do"/>
<author fullname="Weronika Kolodziejak" initials="W." surname="Kolodziejak"/>
<author fullname="Juliusz Chroboczek" initials="J." surname="Chroboczek"/>
<date month="August" year="2018"/></front>
<seriesInfo name="Internet Draft" value="draft-ietf-babel-hmac-00"/>
</reference>

</references>

<section title="Performance Considerations">

<t>To reduce the number of octets taken by the DTLS handshake,
especially the size of the certificate in the ServerHello (which can
be several kilobytes), Babel peers can use raw public keys <xref
target="RFC7250"/> or the Cached Information Extension <xref
target="RFC7924"/>.  The Cached Information Extension avoids
transmitting the server's certificate and certificate chain if the
client has cached that information from a previous TLS handshake.  TLS
False Start <xref target="RFC7918"/> can reduce round trips by
allowing the TLS second flight of messages (ChangeCipherSpec) to also
contain the (encrypted) Babel packet.</t>

<t>These performance considerations were inspired from the ones for
DNS over DTLS <xref target="RFC8094"/>.</t>

</section>

</back>

</rfc>
